<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sat, 04 Mar 2023 15:24:05 GMT -->

<!-- 
   Hi this is Dave Winer. I write all my project code in an outliner, which 
   generates all the files that make up this GitHub project. You'll see a 
   source.opml file like this in each of my projects. It contains the outline 
   source that the repo files were generated from. This is the most logical place 
   to store them. You can read the code in any outliner that supports OPML, which 
   includes http://drummer.scripting.com. You can use the Open URL command in 
   Drummer's File menu to open the "raw" version of this file straight from the 
   GitHub repo.
 -->

<opml version="2.0">
	<head>
		<title>nodeEditor: opmlCloud</title>
		<dateCreated>Tue, 21 Feb 2023 17:51:31 GMT</dateCreated>
		<dateModified>Sat, 04 Mar 2023 15:24:05 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 6, 7, 16, 43, 48, 49, 50, 55, 56, 58, 62, 63, 72, 73, 76, 79, 83, 84, 103, 108, 112, 113, 114, 116, 118, 121, 137, 139, 146, 148</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>166</windowTop>
		<windowLeft>945</windowLeft>
		<windowBottom>1143</windowBottom>
		<windowRight>2182</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/opmlcloud/" created="Sun, 24 Jul 2022 20:12:05 GMT">
			<outline text="worknotes.md" created="Sun, 19 Feb 2023 15:19:09 GMT">
				<outline text="3/4/23; 10:23:48 AM by DW" created="Sat, 04 Mar 2023 15:23:48 GMT">
					<outline text="watchThisOutline was calling its callback even if it was undefined." created="Sat, 04 Mar 2023 15:23:49 GMT"/>
					</outline>
				<outline text="2/19/23; 10:19:17 AM by DW" created="Sun, 19 Feb 2023 15:19:16 GMT">
					<outline text="To redeploy, move package.json and opml.cloud back in here from the section below." created="Sun, 19 Feb 2023 15:19:17 GMT"/>
					</outline>
				</outline>
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;opmlcloud&quot;,"/>
					<outline text="&quot;description&quot;: &quot;A server that emulates Drummer's instant outlining protocol. &quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;main&quot;: &quot;opmlcloud.js&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.1&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;nodejs-websocket&quot;: &quot;*&quot;,"/>
						<outline text="&quot;xml2js&quot;: &quot;*&quot;," created="Wed, 30 Jun 2021 13:10:12 GMT"/>
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;opml&quot;: &quot;*&quot;," created="Sat, 18 Feb 2023 16:25:39 GMT"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;" created="Sat, 18 Feb 2023 16:25:39 GMT"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="opmlcloud.js">
				<outline text="var myProductName = &quot;opmlcloud&quot;; myVersion = &quot;0.4.1&quot;;    "/>
				<outline text="" created="Sat, 01 Oct 2022 15:06:26 GMT"/>
				<outline text="const fs = require (&quot;fs&quot;);" created="Sat, 05 Mar 2022 17:19:07 GMT"/>
				<outline text="const utils = require (&quot;daveutils&quot;); "/>
				<outline text="const websocket = require (&quot;nodejs-websocket&quot;); "/>
				<outline text="const opml = require (&quot;opml&quot;);" created="Sat, 18 Feb 2023 16:25:24 GMT"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;);" created="Sat, 18 Feb 2023 16:25:24 GMT"/>
				<outline text="const request = require (&quot;request&quot;);" created="Sat, 18 Feb 2023 16:25:24 GMT"/>
				<outline text="const xml2js = require (&quot;xml2js&quot;);"/>
				<outline text="" created="Fri, 10 Feb 2023 16:10:01 GMT"/>
				<outline text="var config = {" created="Fri, 10 Feb 2023 16:10:01 GMT">
					<outline text="port: process.env.PORT || 3231," created="Fri, 10 Feb 2023 16:12:18 GMT"/>
					<outline text="websocketPort: 3232," created="Fri, 10 Feb 2023 16:12:18 GMT"/>
					<outline text="flLogToConsole: true,"/>
					<outline text="ctSecsBetwRenews: 23 * 60 * 60, //for an individual outline"/>
					<outline text="thisServer: { //how the cloud server should call us back" created="Thu, 15 Dec 2022 19:09:01 GMT">
						<outline text="domain: &quot;opmlcloud.scripting.com&quot;," created="Thu, 15 Dec 2022 19:09:18 GMT"/>
						<outline text="port: 80," created="Thu, 15 Dec 2022 19:09:25 GMT"/>
						<outline text="outlineUpdatedCallback: &quot;/outlineupdated&quot;"/>
						<outline text="}" created="Thu, 15 Dec 2022 19:09:05 GMT"/>
						</outline>
					<outline text="};" created="Fri, 10 Feb 2023 16:12:11 GMT"/>
					</outline>
				<outline text="" created="Sat, 18 Feb 2023 20:21:13 GMT"/>
				<outline text="var stats = {" created="Fri, 17 Feb 2023 21:01:44 GMT">
					<outline text="ctLaunches: 0," created="Fri, 17 Feb 2023 21:08:39 GMT"/>
					<outline text="whenLastLaunch: undefined," created="Fri, 17 Feb 2023 21:08:46 GMT"/>
					<outline text="ctSaves: 0," created="Fri, 17 Feb 2023 21:08:57 GMT"/>
					<outline text="whenLastSave: undefined," created="Fri, 17 Feb 2023 21:09:01 GMT"/>
					<outline text="outlines: new Object ()" created="Fri, 17 Feb 2023 21:40:14 GMT"/>
					<outline text="};" created="Fri, 17 Feb 2023 21:01:49 GMT"/>
					</outline>
				<outline text="const fnameStats = &quot;stats.json&quot;, fnameConfig = &quot;config.json&quot;;" created="Fri, 17 Feb 2023 21:01:13 GMT"/>
				<outline text="var flStatsChanged = false;" created="Fri, 17 Feb 2023 21:03:44 GMT"/>
				<outline text="" created="Tue, 21 Feb 2023 18:17:01 GMT"/>
				<outline text="var theWsServer = undefined;"/>
				<outline text="" created="Fri, 10 Feb 2023 16:10:01 GMT"/>
				<outline text="" created="Fri, 10 Feb 2023 16:10:01 GMT"/>
				<outline text="function statsChanged () {" created="Fri, 10 Feb 2023 16:10:01 GMT">
					<outline text="flStatsChanged = true;" created="Fri, 17 Feb 2023 21:04:07 GMT"/>
					<outline text="}" created="Fri, 17 Feb 2023 21:04:03 GMT"/>
					</outline>
				<outline text="" created="Sat, 18 Feb 2023 16:25:05 GMT"/>
				<outline text="function httpRequest (url, callback) {">
					<outline text="request (url, function (err, response, data) {">
						<outline text="if (err) {" created="Sun, 08 Aug 2021 15:33:13 GMT">
							<outline text="callback (err);" created="Sun, 08 Aug 2021 15:33:17 GMT"/>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:20 GMT"/>
							</outline>
						<outline text="else {" created="Sun, 08 Aug 2021 15:33:21 GMT">
							<outline text="var code = response.statusCode;" created="Tue, 04 Jan 2022 22:39:15 GMT"/>
							<outline text="if ((code &lt; 200) || (code &gt; 299)) {" created="Sun, 08 Aug 2021 15:33:23 GMT">
								<outline text="const message = &quot;The request returned a status code of &quot; + response.statusCode + &quot;.&quot;;" created="Sun, 08 Aug 2021 15:34:06 GMT"/>
								<outline text="callback ({message});" created="Sun, 08 Aug 2021 15:34:43 GMT"/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:28 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 08 Aug 2021 15:33:29 GMT">
								<outline text="callback (undefined, data) "/>
								<outline text="}" created="Sun, 08 Aug 2021 15:33:31 GMT"/>
								</outline>
							<outline text="}" created="Sun, 08 Aug 2021 15:33:33 GMT"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function requestWithRedirect (theRequest, callback) { //12/11/22 by DW" isComment="true" created="Wed, 28 Sep 2022 17:11:16 GMT">
					<outline text="Changes" isComment="true" created="Sun, 11 Dec 2022 15:02:32 GMT">
						<outline text="12/11/22; 10:02:34 AM by DW" created="Sun, 11 Dec 2022 15:02:34 GMT">
							<outline text="Andrew Shell says that request doesn't pass through the body of a request through callbacks. So we created a version of request that does." created="Sun, 11 Dec 2022 15:02:35 GMT">
								<outline text="https://gist.github.com/andrewshell/8b57f96bf62a1dea9fa1a8137e13951a?permalink_comment_id=4398360#gistcomment-4398360" created="Sun, 11 Dec 2022 15:03:35 GMT"/>
								</outline>
							<outline text="Andrew's version is below..." created="Sun, 11 Dec 2022 15:03:10 GMT">
								<outline text="function requestFollowRedirects(theRequest, callback) {">
									<outline text="theRequest.followAllRedirects = false;"/>
									<outline text="request (theRequest, function (err, response, body) {">
										<outline text="if (parseInt(theRequest.maxRedirects) &gt; 0 &amp;&amp; [301, 320].includes(response.statusCode) &amp;&amp; response.headers.location != null) {">
											<outline text="const newRequest = Object.assign({}, theRequest, { url: response.headers.location });"/>
											<outline text="newRequest.maxRedirects--;"/>
											<outline text="requestFollowRedirects (newRequest, callback);"/>
											<outline text="}"/>
											</outline>
										<outline text="callback (err, response, body)"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								</outline>
							</outline>
						</outline>
					<outline text="var myRequest = new Object ();" created="Sun, 11 Dec 2022 15:14:24 GMT"/>
					<outline text="for (var x in theRequest) {" created="Sun, 11 Dec 2022 15:14:41 GMT">
						<outline text="myRequest [x] = theRequest [x];" created="Sun, 11 Dec 2022 15:14:47 GMT"/>
						<outline text="}" created="Sun, 11 Dec 2022 15:14:55 GMT"/>
						</outline>
					<outline text="myRequest.followAllRedirects = false; //we're doing this ourselves"/>
					<outline text="myRequest.maxRedirects = (myRequest.maxRedirects === undefined) ? 0 : myRequest.maxRedirects;" created="Sun, 11 Dec 2022 15:17:25 GMT"/>
					<outline text="request (myRequest, function (err, response, body) {" created="Sun, 11 Dec 2022 14:56:02 GMT">
						<outline text="if (err) {" created="Sat, 18 Feb 2023 20:32:44 GMT">
							<outline text="callback (err);" created="Sun, 11 Dec 2022 15:02:09 GMT"/>
							<outline text="}" created="Sat, 18 Feb 2023 20:32:47 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 18 Feb 2023 20:32:48 GMT">
							<outline text="const code = response.statusCode;" created="Sun, 11 Dec 2022 14:57:09 GMT"/>
							<outline text="if ((code == 301) || (code == 302)) { //redirect" created="Sun, 11 Dec 2022 14:57:18 GMT">
								<outline text="if (myRequest.maxRedirects == 0) {" created="Sun, 11 Dec 2022 15:00:40 GMT">
									<outline text="callback (err, response, body);" created="Sun, 11 Dec 2022 15:00:55 GMT"/>
									<outline text="}" created="Sun, 11 Dec 2022 15:00:52 GMT"/>
									</outline>
								<outline text="else {" created="Sun, 11 Dec 2022 15:01:24 GMT">
									<outline text="myRequest.maxRedirects--;" created="Sun, 11 Dec 2022 15:01:30 GMT"/>
									<outline text="myRequest.url = response.headers.location;" created="Sun, 11 Dec 2022 15:12:05 GMT"/>
									<outline text="requestWithRedirect (myRequest, callback);" created="Sun, 11 Dec 2022 15:01:38 GMT"/>
									<outline text="}" created="Sun, 11 Dec 2022 15:01:26 GMT"/>
									</outline>
								<outline text="}" created="Sun, 11 Dec 2022 14:57:33 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 11 Dec 2022 15:02:08 GMT">
								<outline text="callback (err, response, body);" created="Sun, 11 Dec 2022 15:02:09 GMT"/>
								<outline text="}" created="Sun, 11 Dec 2022 15:10:23 GMT"/>
								</outline>
							<outline text="}" created="Sat, 18 Feb 2023 20:32:49 GMT"/>
							</outline>
						<outline text="});" created="Sun, 11 Dec 2022 14:56:02 GMT"/>
						</outline>
					<outline text="}" created="Sun, 11 Dec 2022 14:55:31 GMT"/>
					</outline>
				<outline text="function requestNotification (outlineRec, callback) {" isComment="true" created="Sun, 19 Feb 2023 17:14:21 GMT">
					<outline text="function pleaseNotify (urlCloudServer, urlOutline, thisServer, callback) { //3">
						<outline text="Changes" isComment="true">
							<outline text="2/18/23; 3:10:48 PM by DW" created="Sat, 18 Feb 2023 20:10:48 GMT">
								<outline text="Adapted from cloudDemo." created="Sat, 18 Feb 2023 20:10:49 GMT"/>
								</outline>
							<outline text="12/15/22; 3:00:08 PM by DW" created="Thu, 15 Dec 2022 20:00:07 GMT">
								<outline text="Adapted from FeedLand server. " created="Thu, 15 Dec 2022 20:00:08 GMT"/>
								</outline>
							<outline text="12/12/22; 1:21:23 PM by DW" created="Mon, 12 Dec 2022 18:21:23 GMT">
								<outline text="New parameter, domain." created="Mon, 12 Dec 2022 18:21:23 GMT"/>
								</outline>
							<outline text="12/11/22; 1:13:34 PM by DW" created="Sun, 11 Dec 2022 18:13:34 GMT">
								<outline text="Use new requestWithRedirect function, it handles the redirects itself, apparently the built-in request function doesn't carry the body across redirects. " created="Sun, 11 Dec 2022 18:13:35 GMT"/>
								</outline>
							<outline text="12/10/22; 9:50:45 AM by DW" created="Sat, 10 Dec 2022 14:50:44 GMT">
								<outline text="Apparently we weren't following redirects because we used an option that only applies to GET requests? Not totally clear from docs." created="Sat, 10 Dec 2022 14:50:46 GMT"/>
								<outline text="Replaced with followAllRedirects and maxRedirects = 5." created="Sat, 10 Dec 2022 14:51:18 GMT"/>
								</outline>
							<outline text="10/8/22; 2:11:18 PM by DW" created="Sat, 08 Oct 2022 18:11:16 GMT">
								<outline text="Cribbed from RIver6." created="Sat, 08 Oct 2022 18:11:19 GMT"/>
								</outline>
							<outline text="2/9/17; 6:37:04 PM by DW">
								<outline text="Per Andrew's pull request, we now check for body.success in addition to watching for errors. "/>
								</outline>
							</outline>
						<outline text="console.log (&quot;pleaseNotify: urlCloudServer == &quot; + urlCloudServer);" created="Sat, 18 Feb 2023 20:36:02 GMT"/>
						<outline text="function buildParamList (paramtable) { //12/10/22 by DW" created="Sat, 09 Aug 2014 15:39:08 GMT" pgfnum="43181">
							<outline text="Changes" isComment="true" created="Wed, 04 Aug 2021 14:47:01 GMT">
								<outline text="12/10/22; 10:20:59 AM by DW" created="Sat, 10 Dec 2022 15:20:59 GMT">
									<outline text="Cribbed from feedToMasto." created="Sat, 10 Dec 2022 15:20:59 GMT"/>
									</outline>
								<outline text="8/4/21; 10:47:04 AM by DW" created="Wed, 04 Aug 2021 14:47:03 GMT">
									<outline text="Copied twBuildParamList. If an element of params is undefined, don't include it. We were encoding it as a string, &quot;undefined&quot; and all of a sudden on the other side, in davetwitter, it was calling it an error. It is pretty errorish, but why it started now, that's a mystery." created="Wed, 04 Aug 2021 14:47:04 GMT"/>
									</outline>
								</outline>
							<outline text="if (paramtable === undefined) {" created="Sun, 04 Dec 2022 13:46:26 GMT">
								<outline text="return (&quot;&quot;);" created="Sun, 04 Dec 2022 13:46:32 GMT"/>
								<outline text="}" created="Sun, 04 Dec 2022 13:46:35 GMT"/>
								</outline>
							<outline text="else {" created="Sun, 04 Dec 2022 13:46:37 GMT">
								<outline text="var s = &quot;&quot;;" created="Sat, 09 Aug 2014 15:39:47 GMT" pgfnum="43188"/>
								<outline text="for (var x in paramtable) {" created="Sat, 09 Aug 2014 15:39:38 GMT" pgfnum="43186">
									<outline text="if (paramtable [x] !== undefined) { //8/4/21 by DW" created="Wed, 04 Aug 2021 14:48:52 GMT">
										<outline text="if (s.length &gt; 0) {" created="Sat, 09 Aug 2014 15:40:02 GMT" pgfnum="43189">
											<outline text="s += &quot;&amp;&quot;;" created="Sat, 09 Aug 2014 15:40:08 GMT" pgfnum="43190"/>
											<outline text="}" created="Sat, 09 Aug 2014 15:40:14 GMT" pgfnum="43191"/>
											</outline>
										<outline text="s += x + &quot;=&quot; + encodeURIComponent (paramtable [x]);" created="Sat, 09 Aug 2014 15:40:19 GMT" pgfnum="43192"/>
										<outline text="}" created="Wed, 04 Aug 2021 14:49:01 GMT"/>
										</outline>
									<outline text="}" created="Sat, 09 Aug 2014 15:39:43 GMT" pgfnum="43187"/>
									</outline>
								<outline text="return (s);" created="Sat, 09 Aug 2014 15:40:54 GMT" pgfnum="43193"/>
								<outline text="}" created="Sun, 04 Dec 2022 13:46:40 GMT"/>
								</outline>
							<outline text="}" created="Sat, 09 Aug 2014 15:39:35 GMT" pgfnum="43185"/>
							</outline>
						<outline text="const theRequest = {">
							<outline text="url: urlCloudServer,"/>
							<outline text="method: &quot;POST&quot;,"/>
							<outline text="followAllRedirects: true, " created="Thu, 31 Jul 2014 16:39:18 GMT" pgfnum="43069"/>
							<outline text="maxRedirects: 5,"/>
							<outline text="headers: {">
								<outline text="&quot;Content-Type&quot;: &quot;application/x-www-form-urlencoded&quot;" created="Sun, 04 Dec 2022 13:43:35 GMT"/>
								<outline text="},"/>
								</outline>
							<outline text="body: buildParamList ({" created="Sun, 20 Nov 2022 22:11:40 GMT">
								<outline text="domain: thisServer.domain, " created="Mon, 12 Dec 2022 18:22:26 GMT"/>
								<outline text="port: thisServer.port,"/>
								<outline text="path: thisServer.outlineUpdatedCallback,"/>
								<outline text="url1: urlOutline,"/>
								<outline text="protocol: &quot;http-post&quot;"/>
								<outline text="})" created="Sat, 10 Dec 2022 15:19:54 GMT"/>
								</outline>
							<outline text="};"/>
							</outline>
						<outline text="console.log (&quot;pleaseNotify: theRequest == &quot; + utils.jsonStringify (theRequest)); //12/10/22 by DW" isComment="true" created="Sat, 10 Dec 2022 15:05:08 GMT"/>
						<outline text="requestWithRedirect (theRequest, function (err, response, body) {">
							<outline text="if (err) {">
								<outline text="callback (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="xml2js.parseString (body, {explicitArray: false}, function (err, jstruct) {">
									<outline text="if (err) { ">
										<outline text="callback (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="if (jstruct == null) { " created="Mon, 27 Dec 2021 15:06:51 GMT">
											<outline text="let err = {message: &quot;Internal error: xml2js.parseString returned null.&quot;};" created="Mon, 27 Dec 2021 15:07:32 GMT"/>
											<outline text="callback (err);" created="Mon, 27 Dec 2021 15:07:32 GMT"/>
											<outline text="}" created="Mon, 27 Dec 2021 15:07:04 GMT"/>
											</outline>
										<outline text="else {" created="Mon, 27 Dec 2021 15:07:06 GMT">
											<outline text="var theResult = jstruct.notifyResult [&quot;$&quot;];" created="Sun, 19 Feb 2023 16:32:20 GMT"/>
											<outline text="if (theResult.success == &quot;true&quot;) {" created="Sun, 19 Feb 2023 16:32:20 GMT">
												<outline text="callback (undefined);" created="Sun, 19 Feb 2023 16:33:43 GMT"/>
												<outline text="}" created="Sun, 19 Feb 2023 16:33:12 GMT"/>
												</outline>
											<outline text="else {" created="Sun, 19 Feb 2023 16:33:12 GMT">
												<outline text="let err = {message: theResult.msg};" created="Mon, 27 Dec 2021 15:07:32 GMT"/>
												<outline text="callback (err);" created="Mon, 27 Dec 2021 15:07:32 GMT"/>
												<outline text="}" created="Sun, 19 Feb 2023 16:33:14 GMT"/>
												</outline>
											<outline text="}" created="Mon, 27 Dec 2021 15:07:08 GMT"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="pleaseNotify (outlineRec.head.urlCloudServer, outlineRec.urlToWatch, config.thisServer, function (err, data) {" created="Sat, 18 Feb 2023 20:07:11 GMT">
						<outline text="outlineRec.whenLastRenew = new Date ();" created="Sat, 18 Feb 2023 20:16:21 GMT"/>
						<outline text="if (err) {" created="Sat, 18 Feb 2023 20:15:35 GMT">
							<outline text="outlineRec.lastError = err.message;" created="Sat, 18 Feb 2023 20:15:39 GMT"/>
							<outline text="if (callback !== undefined) {" created="Sun, 19 Feb 2023 17:30:48 GMT">
								<outline text="callback (err);" created="Sun, 19 Feb 2023 16:04:12 GMT"/>
								<outline text="}" created="Sun, 19 Feb 2023 17:30:49 GMT"/>
								</outline>
							<outline text="}" created="Sat, 18 Feb 2023 20:15:56 GMT"/>
							</outline>
						<outline text="else {" created="Sat, 18 Feb 2023 20:15:57 GMT">
							<outline text="outlineRec.lastRenewData = data;" created="Sat, 18 Feb 2023 20:16:00 GMT"/>
							<outline text="if (callback !== undefined) {" created="Sun, 19 Feb 2023 17:30:24 GMT">
								<outline text="callback (undefined, outlineRec);" created="Sun, 19 Feb 2023 16:04:21 GMT"/>
								<outline text="}" created="Sun, 19 Feb 2023 17:30:30 GMT"/>
								</outline>
							<outline text="}" created="Sat, 18 Feb 2023 20:16:14 GMT"/>
							</outline>
						<outline text="statsChanged ();"/>
						<outline text="});" created="Sat, 18 Feb 2023 20:15:19 GMT"/>
						</outline>
					<outline text="}" created="Sun, 19 Feb 2023 17:14:33 GMT"/>
					</outline>
				<outline text="function renewReadySubscriptions () {" isComment="true" created="Sat, 18 Feb 2023 20:05:00 GMT">
					<outline text="for (var urlToWatch in stats.outlines) {" created="Sat, 18 Feb 2023 20:05:17 GMT">
						<outline text="let outlineRec = stats.outlines [urlToWatch];" created="Sat, 18 Feb 2023 20:05:53 GMT"/>
						<outline text="if (outlineRec.whenLastRenew === undefined) {" created="Sat, 18 Feb 2023 20:30:39 GMT">
							<outline text="outlineRec.whenLastRenew = new Date (0); " created="Sat, 18 Feb 2023 20:30:51 GMT"/>
							<outline text="statsChanged ();"/>
							<outline text="}" created="Sat, 18 Feb 2023 20:30:47 GMT"/>
							</outline>
						<outline text="if (utils.secondsSince (outlineRec.whenLastRenew) &gt;= config.ctSecsBetwRenews) {" created="Sat, 18 Feb 2023 20:05:53 GMT">
							<outline text="requestNotification (outlineRec, function (err, data) {" created="Sun, 19 Feb 2023 17:15:13 GMT">
								<outline text="});" created="Sun, 19 Feb 2023 17:28:28 GMT"/>
								</outline>
							<outline text="}" created="Sat, 18 Feb 2023 20:07:07 GMT"/>
							</outline>
						<outline text="}" created="Sat, 18 Feb 2023 20:05:47 GMT"/>
						</outline>
					<outline text="}" created="Sat, 18 Feb 2023 20:05:04 GMT"/>
					</outline>
				<outline text="" created="Sun, 19 Feb 2023 15:22:26 GMT"/>
				<outline text="function watchThisOutline (urlToWatch, callback) {" created="Sun, 19 Feb 2023 15:22:26 GMT">
					<outline text="Changes" isComment="true" created="Sun, 19 Feb 2023 15:51:09 GMT">
						<outline text="2/19/23; 10:51:11 AM by DW" created="Sun, 19 Feb 2023 15:51:10 GMT">
							<outline text="We're watching an outline like this." created="Sun, 19 Feb 2023 15:51:12 GMT">
								<outline text="watch http://scripting.com/publicfolder/drummer/dwPublicNotes.opml" isComment="true" created="Fri, 17 Feb 2023 17:08:05 GMT"/>
								</outline>
							<outline text="When we're called we try to renew the request for notification with the cloud server, no matter how long it's been since we last renewed. " created="Sun, 19 Feb 2023 15:51:37 GMT"/>
							<outline text="That's why this function is useful for testing the code that does the renewal. It's probably the most complicated part of this app." created="Sun, 19 Feb 2023 15:52:12 GMT"/>
							</outline>
						</outline>
					<outline text="var now = new Date ();" created="Sun, 19 Feb 2023 15:52:54 GMT"/>
					<outline text="if (stats.outlines [urlToWatch] === undefined) {" created="Sun, 19 Feb 2023 15:52:55 GMT">
						<outline text="stats.outlines [urlToWatch] = {" created="Sun, 19 Feb 2023 15:53:12 GMT">
							<outline text="urlToWatch," created="Sun, 19 Feb 2023 17:15:59 GMT"/>
							<outline text="whenCreated: now," created="Fri, 17 Feb 2023 21:18:09 GMT"/>
							<outline text="whenLastRenew: new Date (0)," created="Tue, 21 Feb 2023 18:17:42 GMT"/>
							<outline text="ctRenews: 0" created="Tue, 21 Feb 2023 18:18:36 GMT"/>
							<outline text="};" created="Sun, 19 Feb 2023 15:53:15 GMT"/>
							</outline>
						<outline text="}" created="Sun, 19 Feb 2023 15:53:06 GMT"/>
						</outline>
					<outline text="var outlineRec = stats.outlines [urlToWatch];" created="Sun, 19 Feb 2023 15:54:30 GMT"/>
					<outline text="opml.readOutline (urlToWatch, function (err, theOutline) {" created="Sat, 18 Feb 2023 16:25:58 GMT">
						<outline text="if (err) {" created="Tue, 25 Oct 2022 16:38:37 GMT">
							<outline text="if (callback !== undefined) {" created="Sat, 04 Mar 2023 15:22:21 GMT">
								<outline text="callback (err);" created="Tue, 25 Oct 2022 16:38:40 GMT"/>
								<outline text="}" created="Sat, 04 Mar 2023 15:22:27 GMT"/>
								</outline>
							<outline text="return;" created="Sun, 19 Feb 2023 15:59:03 GMT"/>
							<outline text="}" created="Tue, 25 Oct 2022 16:38:45 GMT"/>
							</outline>
						<outline text="else {" created="Tue, 25 Oct 2022 16:38:46 GMT">
							<outline text="try {" created="Sat, 18 Feb 2023 16:31:58 GMT">
								<outline text="outlineRec.head = theOutline.opml.head;" created="Sun, 19 Feb 2023 15:55:28 GMT"/>
								<outline text="if (callback !== undefined) {" created="Sat, 04 Mar 2023 15:22:21 GMT">
									<outline text="callback (undefined, outlineRec);" created="Tue, 25 Oct 2022 16:38:40 GMT"/>
									<outline text="}" created="Sat, 04 Mar 2023 15:22:27 GMT"/>
									</outline>
								<outline text="}" created="Sat, 18 Feb 2023 16:32:33 GMT"/>
								</outline>
							<outline text="catch (err) {" created="Sat, 18 Feb 2023 16:32:34 GMT">
								<outline text="if (callback !== undefined) {" created="Sat, 04 Mar 2023 15:22:21 GMT">
									<outline text="callback (err);" created="Tue, 25 Oct 2022 16:38:40 GMT"/>
									<outline text="}" created="Sat, 04 Mar 2023 15:22:27 GMT"/>
									</outline>
								<outline text="return;" created="Sun, 19 Feb 2023 15:59:03 GMT"/>
								<outline text="}" created="Sat, 18 Feb 2023 16:32:37 GMT"/>
								</outline>
							<outline text="}" created="Tue, 25 Oct 2022 16:39:00 GMT"/>
							</outline>
						<outline text="requestNotification (outlineRec, callback);" isComment="true" created="Sun, 19 Feb 2023 17:15:13 GMT"/>
						<outline text="});" created="Sat, 18 Feb 2023 16:26:14 GMT"/>
						</outline>
					<outline text="}" created="Sun, 19 Feb 2023 15:22:38 GMT"/>
					</outline>
				<outline text="function webSocketStartup () {">
					<outline text="function handleWebSocketConnection (conn) { ">
						<outline text="console.log (&quot;handleWebSocketConnection: conn.socket.remoteAddress == &quot; + conn.socket.remoteAddress);" isComment="true" created="Mon, 07 Jun 2021 17:25:37 GMT"/>
						<outline text="function initAppData (conn) {" created="Fri, 17 Feb 2023 17:13:31 GMT">
							<outline text="if (conn.appData === undefined) {" created="Fri, 17 Feb 2023 17:13:50 GMT">
								<outline text="conn.appData = { ">
									<outline text="whenStarted: new Date (),"/>
									<outline text="ctUpdates: 0,"/>
									<outline text="whenLastUpdate: new Date (0),"/>
									<outline text="lastVerb: undefined,"/>
									<outline text="urlToWatch: undefined,"/>
									<outline text="domain: undefined"/>
									<outline text="};"/>
									</outline>
								<outline text="}" created="Fri, 17 Feb 2023 17:13:56 GMT"/>
								</outline>
							<outline text="}" created="Fri, 17 Feb 2023 17:13:41 GMT"/>
							</outline>
						<outline text="conn.on (&quot;text&quot;, function (theText) {">
							<outline text="console.log (&quot;handleWebSocketConnection: theText == &quot; + theText); " created="Mon, 07 Jun 2021 17:25:37 GMT"/>
							<outline text="var words = theText.split (&quot; &quot;);"/>
							<outline text="if (words.length &gt; 1) {">
								<outline text="initAppData (conn);" created="Fri, 17 Feb 2023 17:14:11 GMT"/>
								<outline text="conn.appData.whenLastUpdate = new Date ();"/>
								<outline text="conn.appData.lastVerb = words [0];"/>
								<outline text="switch (words [0]) {">
									<outline text="case &quot;watch&quot;:">
										<outline text="var urlToWatch = utils.trimWhitespace (words [1]);" created="Fri, 17 Feb 2023 21:15:56 GMT"/>
										<outline text="conn.appData.urlToWatch = urlToWatch;"/>
										<outline text="watchThisOutline (urlToWatch);" created="Sun, 19 Feb 2023 15:22:48 GMT"/>
										<outline text="break;"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="conn.on (&quot;close&quot;, function () {">
							<outline text="console.log (&quot;'close' message received.&quot;);"/>
							<outline text="});"/>
							</outline>
						<outline text="conn.on (&quot;error&quot;, function (err) {">
							<outline text="console.log (&quot;'error' message received, err.code == &quot; + err.code);"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="theWsServer = websocket.createServer (handleWebSocketConnection);"/>
					<outline text="console.log (&quot;webSocketStartup: config.websocketPort == &quot; + config.websocketPort);" isComment="true"/>
					<outline text="theWsServer.listen (config.websocketPort);"/>
					<outline text="}"/>
					</outline>
				<outline text="function notifySocketSubscribers (verb, payload, flPayloadIsString, callbackToQualify) {">
					<outline text="Changes" isComment="true" created="Sat, 06 Mar 2021 17:36:54 GMT">
						<outline text="3/6/21; 12:36:58 PM by DW" created="Sat, 06 Mar 2021 17:36:56 GMT">
							<outline text="New optional param, flPayloadIsString. If true we don't treat the payload as if it were a JS object. " created="Sat, 06 Mar 2021 17:36:58 GMT"/>
							<outline text="New optional param, callbackToQualify, if specified we call it on each connection, if it returns true it qualifies to be notified" created="Sat, 06 Mar 2021 20:22:29 GMT"/>
							</outline>
						</outline>
					<outline text="if (theWsServer !== undefined) {">
						<outline text="var ctUpdates = 0, now = new Date (), ctTotalSockets = 0;"/>
						<outline text="if (payload !== undefined) { ">
							<outline text="if (!flPayloadIsString) {" created="Sat, 06 Mar 2021 17:38:36 GMT">
								<outline text="payload = utils.jsonStringify (payload);"/>
								<outline text="}" created="Sat, 06 Mar 2021 17:38:42 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="theWsServer.connections.forEach (function (conn, ix) {">
							<outline text="ctTotalSockets++;" created="Sat, 06 Mar 2021 20:35:11 GMT"/>
							<outline text="if (conn.appData !== undefined) { //it's one of ours">
								<outline text="var flnotify = true;" created="Sat, 06 Mar 2021 20:23:38 GMT"/>
								<outline text="if (callbackToQualify !== undefined) {" created="Sat, 06 Mar 2021 20:23:48 GMT">
									<outline text="flnotify = callbackToQualify (conn);" created="Sat, 06 Mar 2021 20:23:59 GMT"/>
									<outline text="}" created="Sat, 06 Mar 2021 20:23:53 GMT"/>
									</outline>
								<outline text="if (flnotify) {" created="Sat, 06 Mar 2021 20:24:14 GMT">
									<outline text="try {">
										<outline text="conn.sendText (verb + &quot;\r&quot; + payload);"/>
										<outline text="conn.appData.whenLastUpdate = now;"/>
										<outline text="conn.appData.ctUpdates++;"/>
										<outline text="ctUpdates++;"/>
										<outline text="}"/>
										</outline>
									<outline text="catch (err) {">
										<outline text="console.log (&quot;notifySocketSubscribers: socket #&quot; + i + &quot;: error updating&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="}" created="Sat, 06 Mar 2021 20:24:17 GMT"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="console.log (&quot;\nnotifySocketSubscribers: &quot; + ctUpdates + &quot; of &quot; + ctTotalSockets + &quot; sockets were updated.\n&quot;);" isComment="true"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function handlePing (feedUrl, callback) { //5" created="Sat, 17 Dec 2022 16:13:22 GMT">
					<outline text="console.log (&quot;handlePing: feedUrl == &quot; + feedUrl);" created="Sun, 19 Feb 2023 19:35:10 GMT"/>
					<outline text="if (feedUrl !== undefined) {" created="Mon, 20 Feb 2023 14:59:46 GMT">
						<outline text="httpRequest (feedUrl, function (err, filetext) {" created="Thu, 17 Jun 2021 19:56:51 GMT">
							<outline text="if (!err) {" created="Tue, 25 Oct 2022 16:38:37 GMT">
								<outline text="notifySocketSubscribers (&quot;update&quot;, filetext, true, function (conn) {">
									<outline text="console.log (&quot;publishFile: conn.appData.urlToWatch == &quot; + conn.appData.urlToWatch + &quot;, url == &quot; + url); " isComment="true" created="Sat, 06 Mar 2021 20:19:09 GMT"/>
									<outline text="if (conn.appData.urlToWatch == feedUrl) {" created="Sat, 06 Mar 2021 20:25:13 GMT">
										<outline text="return (true);" created="Sat, 06 Mar 2021 20:25:20 GMT"/>
										<outline text="}" created="Sat, 06 Mar 2021 20:25:19 GMT"/>
										</outline>
									<outline text="else {" created="Sat, 06 Mar 2021 20:25:26 GMT">
										<outline text="return (false);" created="Sat, 06 Mar 2021 20:25:28 GMT"/>
										<outline text="}" created="Sat, 06 Mar 2021 20:25:31 GMT"/>
										</outline>
									<outline text="});" created="Sat, 06 Mar 2021 20:24:58 GMT"/>
									</outline>
								<outline text="}" created="Tue, 25 Oct 2022 16:38:45 GMT"/>
								</outline>
							<outline text="})" created="Thu, 17 Jun 2021 19:58:33 GMT"/>
							</outline>
						<outline text="}" created="Mon, 20 Feb 2023 14:59:59 GMT"/>
						</outline>
					<outline text="callback (undefined, {status: &quot;Got the update. Thanks! :-)&quot;})" created="Sat, 17 Dec 2022 16:13:31 GMT"/>
					<outline text="}" created="Sat, 17 Dec 2022 16:13:30 GMT"/>
					</outline>
				<outline text="function httpStartup () {" created="Fri, 10 Feb 2023 16:12:53 GMT">
					<outline text="davehttp.start (config, function (theRequest) {">
						<outline text="const params = theRequest.params;"/>
						<outline text="function returnPlainText (theString) {">
							<outline text="if (theString === undefined) {" created="Sat, 17 Dec 2022 15:19:03 GMT">
								<outline text="theString = &quot;&quot;;" created="Sat, 17 Dec 2022 15:19:12 GMT"/>
								<outline text="}" created="Sat, 17 Dec 2022 15:19:19 GMT"/>
								</outline>
							<outline text="console.log (&quot;returnPlainText: theString == &quot; + theString + &quot;, typeof theString == &quot; + typeof theString);" isComment="true" created="Sat, 17 Dec 2022 14:28:03 GMT"/>
							<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, theString);"/>
							<outline text="}"/>
							</outline>
						<outline text="switch (theRequest.lowerpath) {">
							<outline text="case config.thisServer.outlineUpdatedCallback:">
								<outline text="handlePing (params.url, function (err, pingResponse) { //read the feed, add new stuff to database, etc." created="Sat, 17 Dec 2022 16:20:17 GMT">
									<outline text="logEvent ({" isComment="true" created="Fri, 16 Dec 2022 22:01:11 GMT">
										<outline text="method: &quot;GET&quot;," created="Fri, 16 Dec 2022 22:06:31 GMT"/>
										<outline text="path: config.thisServer.feedUpdatedCallback," created="Fri, 16 Dec 2022 22:01:54 GMT"/>
										<outline text="params," created="Fri, 16 Dec 2022 22:03:27 GMT"/>
										<outline text="myResponse: params.challenge" created="Sat, 17 Dec 2022 16:17:59 GMT"/>
										<outline text="});" created="Fri, 16 Dec 2022 22:01:49 GMT"/>
										</outline>
									<outline text="returnPlainText (params.challenge);" created="Mon, 12 Dec 2022 18:34:49 GMT"/>
									<outline text="});" created="Sat, 17 Dec 2022 16:20:18 GMT"/>
									</outline>
								<outline text="break;" created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
								</outline>
							<outline text="default: " created="Mon, 20 Feb 2023 14:17:31 GMT">
								<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
								<outline text="break;" created="Mon, 20 Feb 2023 14:17:38 GMT"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Sat, 18 Feb 2023 20:19:42 GMT"/>
					</outline>
				<outline text="" created="Fri, 17 Feb 2023 20:56:24 GMT"/>
				<outline text="function startup () {" created="Fri, 17 Feb 2023 20:56:24 GMT">
					<outline text="console.log (&quot;startup&quot;);" created="Fri, 17 Feb 2023 20:56:40 GMT"/>
					<outline text="function readConfig (callback) {">
						<outline text="utils.sureFilePath (fnameConfig, function () {">
							<outline text="fs.readFile (fnameConfig, function (err, data) {">
								<outline text="if (!err) {">
									<outline text="try {">
										<outline text="var jstruct = JSON.parse (data.toString ());"/>
										<outline text="console.log (utils.jsonStringify (jstruct)); " isComment="true"/>
										<outline text="for (var x in jstruct) {">
											<outline text="config [x] = jstruct [x];"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="catch (err) {">
										<outline text="console.log (&quot;readStats: err == &quot; + err.message);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function readStats (callback) {">
						<outline text="utils.sureFilePath (fnameStats, function () {">
							<outline text="fs.readFile (fnameStats, function (err, data) {">
								<outline text="if (!err) {">
									<outline text="try {">
										<outline text="var jstruct = JSON.parse (data.toString ());"/>
										<outline text="console.log (utils.jsonStringify (jstruct)); " isComment="true"/>
										<outline text="for (var x in jstruct) {">
											<outline text="stats [x] = jstruct [x];"/>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="catch (err) {">
										<outline text="console.log (&quot;readStats: err == &quot; + err.message);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="if (callback !== undefined) {">
									<outline text="callback ();"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function everyMinute () {" created="Sat, 18 Feb 2023 20:02:52 GMT">
						<outline text="}" created="Sat, 18 Feb 2023 20:02:59 GMT"/>
						</outline>
					<outline text="function everySecond () {" created="Fri, 17 Feb 2023 21:05:24 GMT">
						<outline text="if (flStatsChanged) {" created="Fri, 17 Feb 2023 21:05:32 GMT">
							<outline text="flStatsChanged = false;" created="Fri, 17 Feb 2023 21:05:51 GMT"/>
							<outline text="stats.ctSaves++; stats.whenLastSave = new Date ();" created="Fri, 17 Feb 2023 21:09:16 GMT"/>
							<outline text="fs.writeFile (fnameStats, utils.jsonStringify (stats), function (err) {" created="Fri, 17 Feb 2023 21:05:54 GMT">
								<outline text="if (err) {" created="Fri, 17 Feb 2023 21:08:00 GMT">
									<outline text="console.log (&quot;everySecond: err.message == &quot; + err.message);" created="Fri, 17 Feb 2023 21:08:03 GMT"/>
									<outline text="}" created="Fri, 17 Feb 2023 21:08:11 GMT"/>
									</outline>
								<outline text="});" created="Fri, 17 Feb 2023 21:07:45 GMT"/>
								</outline>
							<outline text="}" created="Fri, 17 Feb 2023 21:05:47 GMT"/>
							</outline>
						<outline text="renewReadySubscriptions ();" isComment="true" created="Sat, 18 Feb 2023 20:03:43 GMT"/>
						<outline text="}" created="Fri, 17 Feb 2023 21:05:27 GMT"/>
						</outline>
					<outline text="readConfig (function () {" created="Fri, 17 Feb 2023 21:00:18 GMT">
						<outline text="readStats (function () {" created="Fri, 17 Feb 2023 21:00:18 GMT">
							<outline text="if (false) { //for local testing" created="Sun, 19 Feb 2023 17:22:39 GMT">
								<outline text="var urlTestOutline = &quot;http://scripting.com/publicfolder/drummer/dwPublicNotes.opml&quot;;" created="Sun, 19 Feb 2023 16:15:36 GMT"/>
								<outline text="watchThisOutline (urlTestOutline, function (err, data) {" created="Sun, 19 Feb 2023 16:15:36 GMT">
									<outline text="if (err) {" created="Sun, 19 Feb 2023 16:16:29 GMT">
										<outline text="console.log (err.message);" created="Sun, 19 Feb 2023 16:16:37 GMT"/>
										<outline text="}" created="Sun, 19 Feb 2023 16:16:32 GMT"/>
										</outline>
									<outline text="else {" created="Sun, 19 Feb 2023 16:16:32 GMT">
										<outline text="console.log (utils.jsonStringify (data));" created="Sun, 19 Feb 2023 16:16:37 GMT"/>
										<outline text="}" created="Sun, 19 Feb 2023 16:16:34 GMT"/>
										</outline>
									<outline text="fs.writeFile (fnameStats, utils.jsonStringify (stats), function (err) {" created="Fri, 17 Feb 2023 21:05:54 GMT">
										<outline text="if (err) {" created="Fri, 17 Feb 2023 21:08:00 GMT">
											<outline text="console.log (&quot;everySecond: err.message == &quot; + err.message);" created="Fri, 17 Feb 2023 21:08:03 GMT"/>
											<outline text="}" created="Fri, 17 Feb 2023 21:08:11 GMT"/>
											</outline>
										<outline text="});" created="Fri, 17 Feb 2023 21:07:45 GMT"/>
										</outline>
									<outline text="});" created="Sun, 19 Feb 2023 16:16:09 GMT"/>
									</outline>
								<outline text="}" created="Sun, 19 Feb 2023 17:22:45 GMT"/>
								</outline>
							<outline text="delete stats.outlines [&quot;http://scripting.com/publicfolder/drummer/dwPublicNotes.opml&quot;];" created="Sat, 18 Feb 2023 20:36:48 GMT"/>
							<outline text="stats.ctLaunches++; stats.whenLastLaunch = new Date (); statsChanged ();" created="Fri, 17 Feb 2023 21:09:16 GMT"/>
							<outline text="setInterval (everySecond, 1000); "/>
							<outline text="utils.runEveryMinute (everyMinute);" created="Sat, 18 Feb 2023 20:04:21 GMT"/>
							<outline text="everyMinute ();" created="Sat, 18 Feb 2023 20:04:46 GMT"/>
							<outline text="webSocketStartup ();" created="Wed, 28 Sep 2022 17:11:16 GMT"/>
							<outline text="httpStartup ();" created="Sat, 18 Feb 2023 20:19:30 GMT"/>
							<outline text="});" created="Fri, 17 Feb 2023 21:00:23 GMT"/>
							</outline>
						<outline text="});" created="Fri, 17 Feb 2023 21:00:23 GMT"/>
						</outline>
					<outline text="}" created="Fri, 17 Feb 2023 20:56:32 GMT"/>
					</outline>
				<outline text="startup ();"/>
				</outline>
			<outline text="readme.md" created="Sun, 19 Feb 2023 15:19:09 GMT">
				<outline text="# opmlCloud server demo" created="Thu, 15 Dec 2022 19:40:47 GMT">
					<outline text="A working example of a server that bridges between rssCloud and Drummer's instant outlining protocol." created="Sat, 17 Dec 2022 16:49:04 GMT"/>
					</outline>
				<outline text="### Websocket connection" created="Tue, 21 Feb 2023 18:14:25 GMT">
					<outline text="A websocket connection comes in wanting to watch an outline, specified by its URL." created="Tue, 21 Feb 2023 18:14:30 GMT"/>
					<outline text="We call an internal routine, watchThisOutline. " created="Tue, 21 Feb 2023 18:15:36 GMT">
						<outline text="If this is the first time we've seen this outline, we create a record for it in stats.outlines." created="Tue, 21 Feb 2023 18:21:32 GMT"/>
						<outline text="We read the outline and save a copy of its head section in the outline record." created="Tue, 21 Feb 2023 20:13:34 GMT"/>
						<outline text="We always request notification from the rssCloud server when we get the websocket connection." isComment="true" created="Tue, 21 Feb 2023 18:21:38 GMT"/>
						<outline text="We set whenLastRenew which determines when we will re-request according to the rssCloud protocol." isComment="true" created="Tue, 21 Feb 2023 18:21:58 GMT"/>
						</outline>
					</outline>
				<outline text="### When the outline changes" created="Tue, 21 Feb 2023 18:25:26 GMT">
					<outline text="The editor pings us, and we then send an 'update&quot; to every websocket that asked to be notified when the outline updated, exactly as if it were Drummer sending the ping, except it isn't going through Drummer. We also include a copy of the outline." created="Tue, 21 Feb 2023 20:13:58 GMT"/>
					<outline text="It should ping the rssCloud server as if it were an RSS feed." isComment="true" created="Tue, 21 Feb 2023 18:25:35 GMT"/>
					<outline text="The server will then send the pre-arranged /outlineupdated HTTP message." isComment="true" created="Tue, 21 Feb 2023 18:25:48 GMT"/>
					</outline>
				<outline text="### When an app wants to subscribe" created="Tue, 21 Feb 2023 18:28:03 GMT">
					<outline text="It looks in the head section of the OPML file, looking for two values: urlUpdateSocket and urlPublic." created="Tue, 21 Feb 2023 18:28:12 GMT"/>
					<outline text="urlUpdateSocket is the address of this server, and urlPublic is the address of the outline we're subscribing to." created="Tue, 21 Feb 2023 18:32:02 GMT"/>
					<outline text="Then you open a connection to the socket and send a &quot;watch &quot; + urlPublic message over the socket, and you'll start receiving updates. " created="Tue, 21 Feb 2023 18:50:10 GMT"/>
					<outline text="Or you could just open the file using the &lt;i&gt;Open URL&lt;/i&gt; command in Drummer. ;-)" created="Tue, 21 Feb 2023 18:51:00 GMT"/>
					</outline>
				</outline>
			<outline text="styles.css">
				<outline text="body {">
					<outline text="background-color: whitesmoke;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageBody {">
					<outline text="width: 70%;"/>
					<outline text="margin-top: 90px;"/>
					<outline text="margin-left: auto;"/>
					<outline text="margin-right: auto;"/>
					<outline text="margin-bottom: 400px;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divPageTitle {">
					<outline text="font-family: &quot;Ubuntu&quot;;"/>
					<outline text="}"/>
					</outline>
				<outline text=".divIntroParagraph {">
					<outline text="font-family: &quot;Ubuntu&quot;;"/>
					<outline text="font-size: 18px;"/>
					<outline text="margin-bottom: 25px;"/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="code.js" created="Mon, 06 Jun 2022 15:20:22 GMT">
				<outline text="var appConsts = {" created="Fri, 10 Feb 2023 16:19:16 GMT">
					<outline text="urlChatLogSocket: &quot;wss://opmlcloud.scripting.com/&quot;," created="Fri, 10 Feb 2023 16:19:27 GMT"/>
					<outline text="urlOpmlFile: &quot;http://scripting.com/notes.opml&quot;" created="Fri, 17 Feb 2023 15:54:34 GMT"/>
					<outline text="urlChatLogSocket: &quot;wss://testsocket.lucky.wtf/&quot;" isComment="true" created="Fri, 10 Feb 2023 16:19:27 GMT"/>
					<outline text="urlChatLogSocket: &quot;ws://drummer.land/&quot;" isComment="true" created="Fri, 10 Feb 2023 16:19:27 GMT"/>
					<outline text="urlChatLogSocket: &quot;ws://boston.scripting.com:3232/&quot;" isComment="true" created="Fri, 10 Feb 2023 16:19:27 GMT"/>
					<outline text="urlChatLogSocket: &quot;wss://boston.scripting.com:3232/&quot;" isComment="true" created="Fri, 10 Feb 2023 16:19:27 GMT"/>
					<outline text="urlChatLogSocket: &quot;ws://localhost:3232/&quot;" isComment="true" created="Fri, 10 Feb 2023 16:19:27 GMT"/>
					<outline text="};" created="Fri, 10 Feb 2023 16:19:20 GMT"/>
					</outline>
				<outline text="function wsConnectUserToServer () {">
					<outline text="if (true) { //appConsts.flWebsocketEnabled) { //2/8/23 by DW" created="Wed, 08 Feb 2023 15:26:35 GMT">
						<outline text="var mySocket = undefined;" created="Wed, 29 Sep 2021 16:20:51 GMT"/>
						<outline text="function checkConnection () {" created="Wed, 29 Sep 2021 16:20:34 GMT">
							<outline text="if (mySocket === undefined) {">
								<outline text="mySocket = new WebSocket (appConsts.urlChatLogSocket); "/>
								<outline text="console.log (&quot;wsConnectToServer: appConsts.urlChatLogSocket == &quot; + appConsts.urlChatLogSocket);" created="Fri, 10 Feb 2023 16:41:51 GMT"/>
								<outline text="mySocket.onopen = function (evt) {">
									<outline text="const msg = &quot;Hello World&quot;;" isComment="true" created="Fri, 10 Feb 2023 16:20:04 GMT"/>
									<outline text="console.log (&quot;wsConnectToServer: msg == &quot; + msg);" isComment="true"/>
									<outline text="mySocket.send (msg);" isComment="true"/>
									<outline text="" created="Fri, 17 Feb 2023 15:53:27 GMT"/>
									<outline text="if (appConsts.urlOpmlFile !== undefined) {" created="Fri, 17 Feb 2023 15:53:27 GMT">
										<outline text="var msg = &quot;watch &quot; + appConsts.urlOpmlFile;"/>
										<outline text="console.log (&quot;wsConnectUserToServer: msg == &quot; + msg);"/>
										<outline text="mySocket.send (msg);"/>
										<outline text="}" created="Fri, 17 Feb 2023 15:54:02 GMT"/>
										</outline>
									<outline text="};"/>
									</outline>
								<outline text="mySocket.onmessage = function (evt) {">
									<outline text="if (evt.data !== undefined) { //no error">
										<outline text="console.log (&quot;wsConnectToServer: evt.data == &quot; + evt.data);"/>
										<outline text="switch (evt.data) {" created="Mon, 20 Dec 2021 16:38:54 GMT">
											<outline text="case &quot;goodnight&quot;:" created="Mon, 20 Dec 2021 16:38:59 GMT">
												<outline text="if (flWatchSocketForOtherCopies) { //12/20/21 by DW" created="Mon, 20 Dec 2021 16:33:07 GMT">
													<outline text="var msg = &quot;Drummer is running in another tab. You must reload this one, or -- you can safely close it.&quot;;" created="Mon, 20 Dec 2021 16:49:37 GMT"/>
													<outline text="alertDialog (msg, function () {" created="Mon, 20 Dec 2021 16:39:09 GMT">
														<outline text="location.reload (true);" created="Mon, 20 Dec 2021 16:47:54 GMT"/>
														<outline text="});" created="Mon, 20 Dec 2021 16:49:49 GMT"/>
														</outline>
													<outline text="}" created="Mon, 20 Dec 2021 16:33:09 GMT"/>
													</outline>
												<outline text="break;" created="Mon, 20 Dec 2021 16:39:04 GMT"/>
												</outline>
											<outline text="}" created="Mon, 20 Dec 2021 16:38:58 GMT"/>
											</outline>
										<outline text="var updatekey = &quot;update\r&quot;;" isComment="true"/>
										<outline text="if (beginsWith (s, updatekey)) { //it's an update" isComment="true">
											<outline text="var opmltext = stringDelete (s, 1, updatekey.length);"/>
											<outline text="console.log (&quot;wsWatchForChange: update received, urlOpmlFile == &quot; + urlOpmlFile);" isComment="true"/>
											<outline text="" created="Mon, 26 Jul 2021 15:16:31 GMT"/>
											<outline text="//debugging -- 7/26/2 by DW" created="Mon, 26 Jul 2021 15:16:31 GMT">
												<outline text="var theOutline = opmlPackage ().parse (opmltext);" created="Mon, 26 Jul 2021 15:18:12 GMT"/>
												<outline text="var urlPublic = theOutline.opml.head.urlPublic;" created="Mon, 26 Jul 2021 15:18:39 GMT"/>
												<outline text="console.log (&quot;\n*** wsWatchForChange &quot; + new Date ().toLocaleString () + &quot;\n&quot;);" created="Mon, 26 Jul 2021 15:19:49 GMT"/>
												<outline text="if (urlPublic != urlOpmlFile) {" created="Mon, 26 Jul 2021 15:19:30 GMT">
													<outline text="console.log (&quot;Received update for the WRONG OUTLINE.&quot;);" created="Mon, 26 Jul 2021 15:20:10 GMT"/>
													<outline text="}" created="Mon, 26 Jul 2021 15:19:48 GMT"/>
													</outline>
												<outline text="console.log (&quot;urlOpmlFile == &quot; + urlOpmlFile);" created="Mon, 26 Jul 2021 15:20:26 GMT"/>
												<outline text="console.log (&quot;urlPublic == &quot; + urlPublic);" created="Mon, 26 Jul 2021 15:20:26 GMT"/>
												<outline text="console.log (&quot;options == &quot; + jsonStringify (options)); //8/27/21 by DW" created="Mon, 26 Jul 2021 15:20:26 GMT"/>
												<outline text="console.log (&quot;\n***\n&quot;);" created="Mon, 26 Jul 2021 15:19:49 GMT"/>
												</outline>
											<outline text="" created="Mon, 26 Jul 2021 15:16:32 GMT"/>
											<outline text="if ((options.flLocked) || (!isThisTabActive ())) {" created="Mon, 12 Apr 2021 16:21:13 GMT">
												<outline text="console.log (&quot;wsWatchForChange: saving the opmltext to install later.&quot;);" created="Fri, 27 Aug 2021 20:57:36 GMT"/>
												<outline text="waitingOpmltext = opmltext;" created="Mon, 12 Apr 2021 16:22:00 GMT"/>
												<outline text="addOpmlHeadElementsToOptions (waitingOpmltext); //5/15/21 by DW"/>
												<outline text="$(theIconChar).addClass (&quot;iconUpdateWaiting&quot;);"/>
												<outline text="}" created="Mon, 12 Apr 2021 16:21:56 GMT"/>
												</outline>
											<outline text="else {" created="Mon, 12 Apr 2021 16:22:54 GMT">
												<outline text="console.log (&quot;wsWatchForChange: idDefaultOutliner == &quot; + idDefaultOutliner + &quot;, idThisOutliner == &quot; + idThisOutliner);" created="Fri, 27 Aug 2021 20:57:36 GMT"/>
												<outline text="opInitOutliner (opmltext, true);" created="Wed, 16 Jan 2013 00:08:18 GMT" pgfnum="17213"/>
												<outline text="}" created="Mon, 12 Apr 2021 16:22:56 GMT"/>
												</outline>
											<outline text="}"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="};"/>
									</outline>
								<outline text="mySocket.onclose = function (evt) {">
									<outline text="mySocket = undefined;"/>
									<outline text="};"/>
									</outline>
								<outline text="mySocket.onerror = function (evt) {">
									<outline text="console.log (&quot;wsConnectToServer: socket received an error.&quot;);" created="Wed, 31 Mar 2021 14:26:24 GMT"/>
									<outline text="};"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}" created="Wed, 29 Sep 2021 16:20:43 GMT"/>
							</outline>
						<outline text="self.setInterval (checkConnection, 1000);" created="Wed, 29 Sep 2021 16:20:35 GMT"/>
						<outline text="}" created="Wed, 08 Feb 2023 15:26:39 GMT"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="function startup () {">
					<outline text="console.log (&quot;startup&quot;);" created="Fri, 17 Feb 2023 15:43:38 GMT"/>
					<outline text="wsConnectUserToServer ();" created="Fri, 10 Feb 2023 16:18:52 GMT"/>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="index.html" created="Thu, 07 Apr 2022 16:25:39 GMT">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;opmlcloud client&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text="&lt;script src=&quot;code.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text="&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;/&gt;"/>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;h1 class=&quot;divPageTitle&quot; id=&quot;idPageTitle&quot;&gt;opmlcloud client&lt;/h1&gt;"/>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script" created="Tue, 21 Feb 2023 17:53:55 GMT">
			<outline text="nodeEditorSuite.utilities.buildIOpmlCloud ()" created="Fri, 18 Feb 2022 16:51:42 GMT"/>
			</outline>
		</body>
	</opml>
